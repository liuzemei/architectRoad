// 1. 工具类 gulp webpack rollup vite (node 可以让 js 运行在服务器环境 runtime)   让后端可以解析 js 语法   非常适合做前端工具链

// js 由三部分组成 BOM DOM ECMAscirpt node=> ECMAscript 没有 bom dom 的概念

// 2. node 还可以做服务端  node中新增了很多模块 http fs util ... （优化层面 ssr）

// 3. 中间层（解决前后端跨域问题，前端可以格式化数据返回自己使用）


// Node 
// 1. 非阻塞（我调用了这个api 后当前状态是什么样子）  
// 2. 异步I/O（当前这个方法调用完毕后不会立即返回给我结果） 
// 3. 事件驱动（发布订阅模式）

// 阻塞 非阻塞 是描述调用方的
// 同步 异步 是描述被调用方的

// 一般情况下：同步阻塞    异步非阻塞


// node 中能解决哪些问题
// Node处理高并发是有优势的， （单线程的一般都很好处理高并发）
// Node 内核 libuv（底层是C语言搞的）


// Java
// 优点：多线程可以利用多核cpu 可以处理复杂的cpu密集型的任务
// 缺点：不能处理高并发问题，

// Node
// 单线程 不适合做 CPU密集型的，我们web的瓶颈在于 多数都是文件读写  适合 i/o密集型的

// node 支持多进程 可以开n个子进程



















